name: Release

on:
  workflow_run:
    workflows: ["Deploy to BunnyCDN"]
    types: [completed]
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && !contains(github.event.head_commit.message, '[skip ci]')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install --save-dev semantic-release @semantic-release/git @semantic-release/github @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator

    - name: Create game distribution zip
      run: |
        # Créer le répertoire dist
        mkdir -p dist
        
        # Copier tous les fichiers nécessaires avec gestion d'erreur
        cp *.html dist/ 2>/dev/null || echo "No HTML files found"
        cp *.css dist/ 2>/dev/null || echo "No CSS files found"
        cp *.js dist/ 2>/dev/null || echo "No JS files found"
        cp *.json dist/ 2>/dev/null || echo "No JSON files found"
        cp -r src dist/ 2>/dev/null || echo "No src directory found"
        cp -r assets dist/ 2>/dev/null || echo "No assets directory found"
        
        # Créer un README pour la release
        cat > dist/README.md << 'EOF'
        # Tower Rush - Release
        
        ## Installation
        1. Extraire le zip
        2. Ouvrir index.html dans un navigateur
        3. Ou servir via un serveur web local
        
        ## Serveur local
        ```bash
        python3 -m http.server 8000
        # ou
        npx serve .
        ```
        
        Puis aller sur http://localhost:8000
        EOF
        
        # Obtenir la version actuelle et créer les zips
        VERSION=$(node -p "require('./package.json').version")
        echo "Creating release version: $VERSION"
        
        # Créer le zip avec le nom de version
        zip -r "tower-rush-v${VERSION}.zip" dist/ -x "*.DS_Store" "*.git*"
        
        # Créer aussi un zip générique
        zip -r "tower-rush-game.zip" dist/ -x "*.DS_Store" "*.git*"
        
        echo "Created zips:"
        ls -la *.zip

    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release

    - name: Get release info
      id: release
      run: |
        if [ -f "package.json" ]; then
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Released version: $VERSION"
        else
          echo "No package.json found"
        fi