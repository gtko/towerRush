name: Release

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm init -y
        npm install --save-dev semantic-release @semantic-release/git @semantic-release/github @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator

    - name: Create semantic-release config
      run: |
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["master", "main"],
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            [
              "@semantic-release/changelog",
              {
                "changelogFile": "CHANGELOG.md"
              }
            ],
            [
              "@semantic-release/git",
              {
                "assets": [
                  "CHANGELOG.md",
                  "package.json"
                ],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }
            ],
            [
              "@semantic-release/github",
              {
                "assets": [
                  {
                    "path": "**/*.{html,css,js,png,jpg,jpeg,gif,svg,ico,json}",
                    "label": "Game Assets"
                  }
                ]
              }
            ]
          ]
        }
        EOF

    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release

    - name: Get release info
      id: release
      run: |
        if [ -f "package.json" ]; then
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Released version: $VERSION"
        else
          echo "No package.json found"
        fi