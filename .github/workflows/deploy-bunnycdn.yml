name: Deploy to BunnyCDN

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to BunnyCDN Storage
      env:
        BUNNY_STORAGE_ZONE: ${{ secrets.BUNNY_STORAGE_ZONE }}
        BUNNY_STORAGE_PASSWORD: ${{ secrets.BUNNY_STORAGE_PASSWORD }}
        BUNNY_STORAGE_ENDPOINT: ${{ secrets.BUNNY_STORAGE_ENDPOINT }}
      run: |
        # Debug: Check if variables are set
        echo "BUNNY_STORAGE_ZONE: ${BUNNY_STORAGE_ZONE:+SET}"
        echo "BUNNY_STORAGE_PASSWORD: ${BUNNY_STORAGE_PASSWORD:+SET}"
        echo "BUNNY_STORAGE_ENDPOINT: ${BUNNY_STORAGE_ENDPOINT:+SET}"
        
        # Exit if any required variable is missing
        if [ -z "$BUNNY_STORAGE_ZONE" ] || [ -z "$BUNNY_STORAGE_PASSWORD" ] || [ -z "$BUNNY_STORAGE_ENDPOINT" ]; then
          echo "ERROR: One or more required secrets are not set!"
          echo "Please configure the following secrets in your GitHub repository:"
          echo "- BUNNY_STORAGE_ZONE"
          echo "- BUNNY_STORAGE_PASSWORD"
          echo "- BUNNY_STORAGE_ENDPOINT"
          exit 1
        fi
        
        # Install curl if not available
        which curl || sudo apt-get update && sudo apt-get install -y curl
        
        # Function to upload files recursively
        upload_directory() {
          local local_path=$1
          local remote_path=$2
          
          # Upload files in current directory
          for file in "$local_path"/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              # URL encode the filename to handle spaces
              encoded_filename=$(echo -n "$filename" | sed 's/ /%20/g')
              encoded_path=$(echo -n "${remote_path}${encoded_filename}" | sed 's/ /%20/g')
              
              echo "Uploading: $file to ${remote_path}${filename}"
              curl -X PUT \
                -H "AccessKey: $BUNNY_STORAGE_PASSWORD" \
                -H "Content-Type: $(file -b --mime-type "$file")" \
                --data-binary "@$file" \
                --fail-with-body \
                "https://${BUNNY_STORAGE_ENDPOINT}.bunnycdn.com/${BUNNY_STORAGE_ZONE}${encoded_path}"
            elif [ -d "$file" ]; then
              dirname=$(basename "$file")
              upload_directory "$file" "${remote_path}${dirname}/"
            fi
          done
        }
        
        # Create deployment package
        echo "Creating deployment package..."
        
        # Create temporary directory for deployment
        mkdir -p deploy_temp
        
        # Copy all necessary files
        cp *.html deploy_temp/ 2>/dev/null || true
        cp *.css deploy_temp/ 2>/dev/null || true
        cp *.js deploy_temp/ 2>/dev/null || true
        cp *.json deploy_temp/ 2>/dev/null || true
        cp -r src deploy_temp/ 2>/dev/null || true
        cp -r assets deploy_temp/ 2>/dev/null || true
        
        # Create zip file
        cd deploy_temp
        zip -r ../deployment.zip . -x "*.DS_Store" "*.git*"
        cd ..
        
        echo "Deployment package created: $(ls -lh deployment.zip)"
        
        # Upload zip file
        echo "Uploading deployment package..."
        curl -X PUT \
          -H "AccessKey: $BUNNY_STORAGE_PASSWORD" \
          -H "Content-Type: application/zip" \
          --data-binary "@deployment.zip" \
          --fail-with-body \
          "https://${BUNNY_STORAGE_ENDPOINT}.bunnycdn.com/${BUNNY_STORAGE_ZONE}/deployment.zip"
        
        # Extract zip on server (if supported by BunnyCDN)
        echo "Attempting to extract zip on server..."
        curl -X POST \
          -H "AccessKey: $BUNNY_STORAGE_PASSWORD" \
          --fail-with-body \
          "https://${BUNNY_STORAGE_ENDPOINT}.bunnycdn.com/${BUNNY_STORAGE_ZONE}/deployment.zip?extract=true" || {
          echo "Server extraction not supported, uploading individual files..."
          
          # Fallback: Upload individual files
          cd deploy_temp
          
          # Upload HTML files
          for file in *.html; do
            if [ -f "$file" ]; then
              echo "Uploading: $file"
              curl -X PUT \
                -H "AccessKey: $BUNNY_STORAGE_PASSWORD" \
                -H "Content-Type: text/html" \
                --data-binary "@$file" \
                --fail-with-body \
                "https://${BUNNY_STORAGE_ENDPOINT}.bunnycdn.com/${BUNNY_STORAGE_ZONE}/${file}"
            fi
          done
          
          # Upload CSS files
          for file in *.css; do
            if [ -f "$file" ]; then
              echo "Uploading: $file"
              curl -X PUT \
                -H "AccessKey: $BUNNY_STORAGE_PASSWORD" \
                -H "Content-Type: text/css" \
                --data-binary "@$file" \
                --fail-with-body \
                "https://${BUNNY_STORAGE_ENDPOINT}.bunnycdn.com/${BUNNY_STORAGE_ZONE}/${file}"
            fi
          done
          
          # Upload JS files
          for file in *.js; do
            if [ -f "$file" ]; then
              echo "Uploading: $file"
              curl -X PUT \
                -H "AccessKey: $BUNNY_STORAGE_PASSWORD" \
                -H "Content-Type: application/javascript" \
                --data-binary "@$file" \
                --fail-with-body \
                "https://${BUNNY_STORAGE_ENDPOINT}.bunnycdn.com/${BUNNY_STORAGE_ZONE}/${file}"
            fi
          done
          
          # Upload manifest.json
          if [ -f "manifest.json" ]; then
            echo "Uploading: manifest.json"
            curl -X PUT \
              -H "AccessKey: $BUNNY_STORAGE_PASSWORD" \
              -H "Content-Type: application/json" \
              --data-binary "@manifest.json" \
              --fail-with-body \
              "https://${BUNNY_STORAGE_ENDPOINT}.bunnycdn.com/${BUNNY_STORAGE_ZONE}/manifest.json"
          fi
          
          # Upload directories
          cd ..
          upload_directory "deploy_temp/src" "/src/"
          upload_directory "deploy_temp/assets" "/assets/"
        }
        
        # Cleanup
        rm -rf deploy_temp deployment.zip
        
        echo "Upload completed!"

    - name: Purge BunnyCDN Cache
      env:
        BUNNY_API_KEY: ${{ secrets.BUNNY_API_KEY }}
        BUNNY_PULL_ZONE_ID: ${{ secrets.BUNNY_PULL_ZONE_ID }}
      run: |
        echo "Purging CDN cache..."
        curl -X POST \
          -H "AccessKey: $BUNNY_API_KEY" \
          --fail-with-body \
          "https://api.bunny.net/pullzone/${BUNNY_PULL_ZONE_ID}/purgeCache"
        echo "Cache purged successfully!"

    - name: Deploy Summary
      run: |
        echo "üöÄ Deployment completed!"
        echo "üì¶ Files uploaded to BunnyCDN Storage Zone: ${{ secrets.BUNNY_STORAGE_ZONE }}"
        echo "üåê Your site should be available at your configured BunnyCDN URL"
        echo "‚è∞ Deployed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"